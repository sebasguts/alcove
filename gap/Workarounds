
###############################
## NullspaceMat for IsMatrixObj

DeclareAttribute( "NullspaceMat", IsMatrixObj );

InstallMethod( NullspaceMat,
		"temporary workaround",
		[ IsMatrixObj ],

 function( matobj )
  local nullsp;
  nullsp := NullspaceMat( Unpack( matobj ) );

  if IsEmpty( nullsp ) then return Matrix( [ List( [1..DimensionsMat(matobj)[1]], i -> Zero(BaseDomain(matobj)) ) ], matobj ); fi;

  return Matrix( nullsp, matobj );
 end

);


##########################
## RankMat for IsMatrixObj

DeclareAttribute( "RankMat", IsMatrixObj );

InstallMethod( RankMat,
		"for matrix objects",
		[ IsMatrixObj ],

 function( mat )
  local mutMat, rk, col, row, actRows, foundRow, rowCoeff, foundCoeff, calcCol;

  rk := 0;
  mutMat := MutableCopyMat( mat );
  actRows := [ 1 .. DimensionsMat(mat)[1] ];

  for col in [ 1 .. DimensionsMat(mat)[2] ] do

   foundRow := 0;
   for row in actRows do  

    rowCoeff := MatElm( mutMat, row, col );
    if not IsZero( rowCoeff ) then

     if foundRow = 0 then

      rk := rk + 1;
      foundRow := row;
      foundCoeff := rowCoeff;

     else

      rowCoeff := rowCoeff/foundCoeff;
      for calcCol in [ col+1 .. DimensionsMat(mat)[2] ] do
       SetMatElm( mutMat, row, calcCol,
	MatElm(mutMat,row,calcCol) - rowCoeff * MatElm(mutMat,foundRow,calcCol) );
      od;

     fi;

    fi;

   od;
   actRows := Difference( actRows, [ foundRow ] );

  od;

  return rk;
 end

);


################################
## RankSubMatrix for IsMatrixObj

DeclareOperation( "RankSubMatrix", [ IsMatrixObj, IsList, IsList ] );

InstallMethod( RankSubMatrix, [ IsMatrixObj, IsList, IsList ],

 function( mat, rows, cols )
  return RankMat( ExtractSubMatrix( mat, rows, cols ) );
#
#  local submat, rk, col, row, actRows, foundRow, rowCoeff, foundCoeff, calcCol;
#
#  rk := 0;
#  submat := ExtractSubMatrix( mat, rows, cols );
#  actRows := [ 1 .. Size(rows) ];
#
#  for col in [ 1 .. Size(cols) ] do
#
#   foundRow := 0;
#   for row in actRows do  
#
#    rowCoeff := MatElm( submat, row, col );
#    if not IsZero( rowCoeff ) then
#
#     if foundRow = 0 then
#
#      rk := rk + 1;
#      foundRow := row;
#      foundCoeff := rowCoeff;
#
#     else
#
#      rowCoeff := rowCoeff/foundCoeff;
#      for calcCol in [ col+1 .. Size(cols) ] do
#       SetMatElm( submat, row, calcCol,
#	MatElm(submat,row,calcCol) - rowCoeff * MatElm(submat,foundRow,calcCol) );
#      od;
#
#     fi;
#
#    fi;
#
#   od;
#   actRows := Difference( actRows, [ foundRow ] );
#
#  od;
#
#  return rk;
 end

);


InstallMethod( Rank, "temporary workaround", [ IsMatrixObj ], function( matobj ) return RankMat( matobj ); end );
